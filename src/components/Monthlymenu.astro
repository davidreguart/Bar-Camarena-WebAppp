---
// Importa el JSON
import dishes from "../../data/dishes.json";

// Obtener el día del mes actual
const currentDay = new Date().getDate();
const todayDishes = dishes[currentDay] || ["-", "-", "-", "-"];
const isTransparent = todayDishes.every((dish) => dish === "-");
const isToday = (day) => day === currentDay;

// Obtener el primer día del mes (1 de mes actual)
const firstDayOfMonth = new Date(
  new Date().getFullYear(),
  new Date().getMonth(),
  1
);

// Calcular el día de la semana del primer día del mes (lunes = 1, martes = 2, etc.)
const firstDayWeekIndex = (firstDayOfMonth.getDay() + 6) % 7; // Ajuste para que lunes sea 0 y domingo sea 6
---

<section id="menu" class="w-11/12 md:w-3/4 m-auto">
  <h2 class="text-4xl text-negro font-bold text-center mb-8">
    Menú <span class="text-rojo">diario</span>
  </h2>
  <p class="w-3/4 mx-auto text-lg text-center mb-8">
    Aquí podrás encontrar los 4 platos que vamos a preparar para cada día de
    este mes, son distintos todos los días y puedes venir a probarlos a nuestro
    local o recogerlos para llevar.
  </p>

  <!--<div class="text-center mb-8">
    <button
      id="download-pdf"
      class="px-4 py-2 rounded-xl bg-rojo text-blanco hover:bg-rojo-dark transition-all duration-300 ease-in-out"
    >
      Descargar Menú en PDF
    </button>
  </div>-->

  <!-- Slider para móviles -->
  <div
    id="mobile-slider"
    class="block md:hidden overflow-x-auto whitespace-nowrap scroll-smooth"
  >
    {
      // Creamos un array de 31 días y añadimos los días vacíos al inicio
      Array.from({ length: firstDayWeekIndex + 28 }, (_, i) => {
        if (i < firstDayWeekIndex) {
          return (
            <div
              key={i}
              class="inline-block text-center border-2 border-transparent rounded-xl p-4 w-52 m-2"
            >
              {/* Tarjeta vacía */}
            </div>
          );
        }

        const day = i - firstDayWeekIndex + 1;
        const dishesForDay = dishes[day] || ["-", "-", "-", "-"];
        const isTransparent = dishesForDay.every((dish) => dish === "-");
        const todayClass = isToday(day) ? "bg-amarillo" : "";

        // Días de la semana, comenzando por lunes
        const daysOfWeek = [
          "Lunes",
          "Martes",
          "Miércoles",
          "Jueves",
          "Viernes",
          "Sábado",
          "Domingo",
        ];

        // Calcular el día de la semana ajustado al día de inicio del mes
        const dayOfWeek = daysOfWeek[i % 7];

        return (
          <div
            key={day}
            id={`dayCard-${day}`}
            class={`inline-block text-center border-2 border-negro rounded-xl p-4 w-52 m-2 ${isTransparent ? "transparent-card" : ""} ${todayClass}`}
          >
            <h3 class="text-xl font-bold mb-2">{day}</h3>
            <p class="text-sm font-medium mb-1">{dayOfWeek}</p>
            <hr class="w-4/5 h-[1px] mx-auto my-2 bg-negro border-0 rounded-full" />
            <ul class="text-sm">
              {dishesForDay.map((dish, index) => (
                <li key={index}>{dish}</li>
              ))}
            </ul>
          </div>
        );
      })
    }
  </div>

  <!-- Diseño de cuadrícula para resoluciones mayores -->
  <div class="hidden md:grid grid-cols-7 gap-4">
    {
      // Creamos un array de 31 días y añadimos los días vacíos al inicio
      Array.from({ length: firstDayWeekIndex + 28 }, (_, i) => {
        if (i < firstDayWeekIndex) {
          return (
            <div
              key={i}
              class="bg-blanco text-center border-2 border-negro rounded-xl p-2"
            >
              {/* Tarjeta vacía */}
            </div>
          );
        }

        const day = i - firstDayWeekIndex + 1;
        const dishesForDay = dishes[day] || ["-", "-", "-", "-"];
        const isTransparent = dishesForDay.every((dish) => dish === "-");
        const todayClass = isToday(day) ? "bg-amarillo" : "";

        // Días de la semana, comenzando por lunes
        const daysOfWeek = [
          "Lunes",
          "Martes",
          "Miércoles",
          "Jueves",
          "Viernes",
          "Sábado",
          "Domingo",
        ];

        // Calcular el día de la semana ajustado al día de inicio del mes
        const dayOfWeek = daysOfWeek[i % 7];

        return (
          <div
            key={day}
            class={`bg-blanco text-center border-2 border-negro rounded-xl p-2 ${isTransparent ? "transparent-card" : ""} ${todayClass}`}
          >
            <h3 class="text-xl font-bold mb-2">
              {dayOfWeek} {day}
            </h3>
            <hr class="w-4/5 h-[1.5px] mx-auto my-2 bg-negro border-0 rounded-full" />
            <ul class="text-sm font-regular">
              {dishesForDay.map((dish, index) => (
                <li key={index}>{dish}</li>
              ))}
            </ul>
          </div>
        );
      })
    }
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const currentDay = new Date().getDate();
    const dayCardId = `dayCard-${currentDay}`;
    const dayCard = document.getElementById(dayCardId);
    const slider = document.getElementById("mobile-slider");

    if (dayCard && slider) {
      // Usar IntersectionObserver para detectar cuando el slider entra en la vista
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // Calcular la posición de scroll para centrar el dayCard en el slider
            const sliderWidth = slider.clientWidth;
            const cardWidth = dayCard.offsetWidth;
            const cardOffset = dayCard.offsetLeft;
            const scrollPosition = cardOffset - sliderWidth / 2 + cardWidth / 2;

            // Realizar el scroll suave
            slider.scrollTo({ left: scrollPosition, behavior: "smooth" });

            // Aplicar clase para escala (opcional)
            dayCard.classList.add("scale-105");

            // Dejar de observar una vez que se ha realizado el scroll
            observer.unobserve(slider);
          }
        });
      });

      // Comenzar a observar el slider
      observer.observe(slider);
    } else {
      console.error("El slider o la tarjeta del día actual no se encontraron.");
    }
  });
</script>

<style>
  .transparent-card {
    background-color: rgba(234, 88, 87, 0.5);
    border-color: black;
  }
  .bg-amarillo {
    background-color: #transparent;
  }
</style>
